<?php

/**
 * Lenevor Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file license.md.
 * It is also available through the world-wide-web at this URL:
 * https://lenevor.com/license
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@Lenevor.com so we can send you a copy immediately.
 *
 * @package     Lenevor
 * @subpackage  Base
 * @author      Javier Alexander Campo M. <jalexcam@gmail.com>
 * @link        https://lenevor.com 
 * @copyright   Copyright (c) 2019 Lenevor Framework 
 * @license     https://lenevor.com/license or see /license.md or see https://opensource.org/licenses/BSD-3-Clause New BSD license
 * @since       0.1.1
 */

namespace Syscode\Routing;

use Syscode\Support\Str;
use Syscode\Http\Request;
use InvalidArgumentException;

/**
 * Returns the URL generated by the user.
 * 
 * @author Javier Alexander Campo M. <jalexcam@gmail.com>
 */
class UrlGenerator
{
    /**
     * The force URL root.
     * 
     * @var string $forcedRoot 
     */
    protected $forcedRoot;

    /**
     * The force Schema for URLs.
     * 
     * @var string $forcedSchema
     */
    protected $forcedSchema;
     
    /**
     * The Request instance.
     * 
     * @var string $request
     */
    protected $request;

    /**
     * Constructor. The UrlGenerator class instance.
     * 
     * @param  \Syscode\Http\Request  $request
     * 
     * @return void
     */
    public function __construct(Request $request)
    {
        $this->setRequest($request);
    }

    /**
     * Generate a absolute URL to the given path.
     * 
     * @param  string     $path
     * @param  mixed      $options
     * @param  bool|null  $secure
     * 
     * @return string
     */
    public function to($path, $options = [], $secure = null)
    {
        if ($this->isValidUrl($path))
        {
            return $path;
        }

        $scheme = $this->getScheme($secure);

        $tail = implode('/', array_map('rawurlencode', (array) $options));

        $root = $this->getRootUrl($scheme);

        return $this->trim($root, $path, $tail);
    }

    /**
     * Get the scheme for a raw URL.
     * 
     * @param  bool|null  $secure
     * 
     * @return string
     */
    public function getScheme($secure)
    {
        if (is_null($secure))
        {
            return $this->forcedSchema ?: $this->request->getScheme().'://';
        }

        return $secure ? 'https://' : 'http://';
    }

    /**
     * Force the schema for URLs.
     * 
     * @param  string  $schema
     * 
     * @return void
     */
    public function forcedSchema($schema)
    {
        $this->forcedSchema = $schema.'://'; 
    }

    /**
     * Get the base URL for the request.
     * 
     * @param  string       $scheme
     * @param  string|null  $root
     * 
     * @return string
     */
    protected function getRootUrl($scheme, $root = null)
    {
        if (is_null($root))
        {
            $root = $this->forcedRoot ?: $this->request->root();
        }

        $begin = Str::startsWith($root, 'http://') ? 'http://' : 'https://';

        return preg_replace("~$begin~", $scheme, $root, 1);
    }

    /**
     * Set the forced root URL.
     * 
     * @param  string  $root
     * 
     * @return void
     */
    public function forcedRoot($root)
    {
        $this->forcedRoot = $root;
    }
    
    /**
     * Determine if the given path is a valid URL.
     * 
     * @param  string  $path
     * 
     * @return bool
     */
    public function isValidUrl($path)
    {
        if (Str::startsWith($path, array('#', '//', 'mailto:', 'tel:', 'http://', 'https://'))) 
        {
            return true;
        }
        
        return filter_var($path, FILTER_VALIDATE_URL) !== false;
    }

    /**
     * Format the given URL segments into a single URL.
     * 
     * @param  string  $root
     * @param  string  $path
     * @param  string  $tail
     * 
     * @return string
     */
    protected function trim($root, $path, $tail = '')
    {
        return trim($root.'/'.trim($path.'/'.$tail, '/'), '/');
    }

    /**
     * Gets the Request instance.
     * 
     * @return \Syscode\Http\Request
     */
    public function getRequest()
    {
        return $this->request;
    }

    /**
     * Sets the current Request instance.
     * 
     * @param  \Syscode\Http\Request  $request
     * 
     * @return void
     */
    public function setRequest(Request $request)
    {
        $this->request = $request;
    }
}